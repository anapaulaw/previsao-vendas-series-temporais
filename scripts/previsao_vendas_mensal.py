# -*- coding: utf-8 -*-
"""Previsao_Vendas_Mensal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1afKBGppjugChgXfLnYnjWwPiOdF23jiX
"""

!pip install numpy==1.26.4 scipy==1.13.1 pmdarima==2.0.4 statsmodels==0.14.1 pandas==2.2.2

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.stattools import adfuller
from sklearn.metrics import mean_squared_error, mean_absolute_error
import warnings
warnings.filterwarnings("ignore")

caminho_arquivo = "VendasMensais.csv"
df = pd.read_csv(caminho_arquivo)
df

data_col = 'Period'
sales_col = 'Revenue'

df['Period'] = pd.to_datetime(df['Period'], format='%d.%m.%Y')
df = df.sort_values('Period')

df.set_index(data_col, inplace=True)

df = df[df.index.year <= 2020]  # 2015 até 2020
df = df.dropna(subset=['Revenue'])  # Remove linha com valores ausentes

print("Início da série:", df.index.min())
print("Fim da série:", df.index.max())

plt.figure(figsize=(12,4))
plt.plot(df[sales_col], label='Vendas Mensais')
plt.title('Série Temporal de Vendas')
plt.xlabel('Period')
plt.ylabel('Vendas')
plt.legend()
plt.show()

df_cleaned = df.dropna(subset=[sales_col])

result = adfuller(df_cleaned[sales_col])
print('ADF Statistic: %f' % result[0])
print('p-value: %f' % result[1])
if result[1] < 0.05:
    print("Série estacionária")
else:
    print("Série não estacionária - precisa diferenciar")

p,d,q = 1,1,1
P,D,Q,m = 1,1,1,12  # sazonalidade mensal

model = SARIMAX(df['Revenue'], order=(p,d,q), seasonal_order=(P,D,Q,m))
model_fit = model.fit(disp=False)
print(model_fit.summary())

#previsão próximos 12 meses
n_steps = 12
pred = model_fit.get_forecast(steps=n_steps)
pred_ci = pred.conf_int()

start_date = df.index.max() + pd.DateOffset(months=1)
forecast_index = pd.date_range(start=start_date, periods=12, freq='MS')
pred.predicted_mean.index = forecast_index
pred_ci.index = forecast_index

plt.figure(figsize=(15,4))
plt.plot(df['Revenue'], label='Histórico')
plt.plot(pred.predicted_mean, label='Previsão (2021)', color='orange')
plt.fill_between(pred_ci.index,
                 pred_ci.iloc[:, 0],
                 pred_ci.iloc[:, 1], color='pink', alpha=0.3)

plt.title('Previsão de Vendas Mensais para o Ano de 2021')
plt.xlabel('Data')
plt.ylabel('Vendas')
plt.legend()

from pmdarima import auto_arima


modelo_auto = auto_arima(
    df['Revenue'],
    seasonal=True,
    m=12,  # sazonalidade mensal
    trace=True,
    error_action='ignore',
    suppress_warnings=True,
    stepwise=True,
    information_criterion='aic'
)

print(modelo_auto.summary())

model = SARIMAX(df['Revenue'],
                order=modelo_auto.order,
                seasonal_order=modelo_auto.seasonal_order)
model_fit = model.fit(disp=False)

n_steps = 12
pred = model_fit.get_forecast(steps=n_steps)
pred_ci = pred.conf_int()

start_date = df.index.max() + pd.DateOffset(months=1)
forecast_index = pd.date_range(start=start_date, periods=12, freq='MS')
pred.predicted_mean.index = forecast_index
pred_ci.index = forecast_index

import matplotlib.dates as mdates

plt.figure(figsize=(15,4))
plt.plot(df['Revenue'], label='Histórico')
plt.plot(pred.predicted_mean, label='Previsão (2021)', color='orange')
plt.fill_between(pred_ci.index,
                 pred_ci.iloc[:, 0],
                 pred_ci.iloc[:, 1], color='pink', alpha=0.3)

plt.title('Previsão de Vendas Mensais para o Ano de 2021 (com auto_arima)')
plt.xlabel('Data')
plt.ylabel('Vendas')
plt.legend()

ax = plt.gca()
ax.xaxis.set_major_locator(mdates.YearLocator())
ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))

plt.show()